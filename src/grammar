array              = name sect
c                  = real / string / logical / complex
comma              = ','
comment            = '!' #'[^\n]*' #'\s+'
complex            = '(' <#'\s*'> real <#'\s*'> comma <#'\s*'> real <#'\s*'> ')'
dataref            = partref ( '%' partref )*
dec                = '.' uint?
detritus           = ( !input-stmt #'[^\n]*' '\n' )*
exp                = sign uint / #'[eE]' <#'\s*'> int / #'[dD]' <#'\s*'> int
false              = 'f' / 'F'
group-name         = #'[a-zA-Z][a-zA-Z0-9_]{0,30}'
input-stmt         = input-stmt-prefix nv-subseqs <slash-term>
input-stmt-prefix  = <#'\s*'> <'&'> group-name <#'\s+'>
int                = sign? uint
logical            = <'.'>? ( true / false ) <#'[^/,=\s]*'>
minus              = '-'
name               = #'[a-zA-Z][a-zA-Z0-9_]{0,62}'
null               = #'\s*' &sep-comma
nv-subseq          = dataref <#'\s*=\s*'> val-and-sep ( <comment> / val-and-sep )*
nv-subseqs         = <comment*> nv-subseq*
partref            = array / name
plus               = '+'
r                  = uint
real               = int dec? exp? / sign? dec int exp?
s                  = ( <detritus> input-stmt )+ <detritus>
sect               = '(' ( int? ':' int? / int ) ( ':' int )? ')'
sep                = sep-comma / sep-blank / &slash-term
sep-blank          = #'\s+' &( val / dataref / comment )
sep-comma          = #'\s*,\s*'
sign               = minus / plus
slash-term         = #'\s*/\s*'
star               = '*'
string             = "'" ( #'[^\'\n]' / "''" / <"\n"> )* "'" / '"' ( #'[^\"\n]' / '""' / <"\n"> )* '"'
true               = 't' / 'T'
uint               = #'[0-9]+'
user-supplied-vals = val ( <sep> val )* <sep>?
val                = r star c / r star / c / <null>
val-and-sep        = val <sep>
